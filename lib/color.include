#!/usr/bin/env bash
#####################################################################################
#
#	colorful colors, yay...
#
#####################################################################################
readonly ANSI_ATTR_RESET=0
readonly ANSI_ATTR_LIGHT=1
readonly ANSI_ATTR_DARK=2
readonly ANSI_ATTR_ITALIC=3
readonly ANSI_ATTR_UNDERLINE=4
readonly ANSI_ATTR_BLINK=5
readonly ANSI_ATTR_REVERSE=7
readonly ANSI_ATTR_HIDE=8
readonly ANSI_ATTRIBUTES=(RESET LIGHT DARK UNDERLINE BLINK REVERSE HIDE)

readonly ANSI_COLOR_FG=3
readonly ANSI_COLOR_BG=4
readonly ANSI_BGFG=(BG FG)

readonly ANSI_BLACK=0
readonly ANSI_RED=1
readonly ANSI_GREEN=2
readonly ANSI_YELLOW=3
readonly ANSI_BLUE=4
readonly ANSI_MAGENTA=5
readonly ANSI_CYAN=6
readonly ANSI_WHITE=7
readonly ANSI_DEFAULT=9
readonly ANSI_COLORS=(BLACK RED GREEN YELLOW BLUE MAGENTA CYAN WHITE DEFAULT)
#####################################################################################
#
# get ansi escaped code for each code supplied
#
# ansi_string=$(ansi_escape 0 31 42)
#
#####################################################################################
function ansi_escape()
{
	for code
	do
		echo -n "\e[${code}m"
	done
}
#####################################################################################
#
# get ansi escaped color from bg-fg code and color code
#
# ansi_string=$(ansi_color 1 7)
#
#####################################################################################
function ansi_color()
{
	local _bgfg=${1}
	local _color=${2}
	echo "$(ansi_escape ${_bgfg}${_color})"
}
#####################################################################################
#
# get ansi escaped text from ansi attribute and/or ansi color code
#
# echolor -a invert -b red -f blue hello
# printf "$(echolor -a invert -b red -f blue)%s$" $var
#
#####################################################################################
function echolor()
{
	[ $# -gt 0 ] || return	# avoids printing final reset if no parameters given
	
	local _output
	
	while getopts "a:b:f:" OPT
	do
		case "${OPT}" in
			a)
				if [ ${ANSI_ATTRIBUTES[${OPT^^}]+EXISTS} = EXISTS ]			# check if attr exists
				then
					_attrib=ANSI_ATTR_${OPTARG^^}							# create variable name
					_output="${_output}$(ansi_escape ${!_attrib})"			# use indirection
				fi
			;;
			b)																# fall-through
			;&
			f)
				if [ ${ANSI_COLORS[${OPTARG^^}]+EXISTS} = EXISTS ]			# check if color exists
				then
					[ ${OPT^^} = B ] && {
						_bgfg=${ANSI_COLOR_BG}								# set bg
					} || { 
						_bgfg=${ANSI_COLOR_FG}								# set fg
					}
					_color=ANSI_${OPTARG^^}									# create variable name
					_output="${_output}$(ansi_color ${_bgfg} ${!_color})"	# use indirection
				fi
			;;
		esac
	done
	shift "$((OPTIND-1))"
	
	_text="${*}"															# get remaining params
	echo "${_output}${_text}$(ansi_escape ${ANSI_ATTR_RESET})"
}
#####################################################################################
#
#####################################################################################
if [ "${BASH_SOURCE[0]}" = "${0}" ]
then
	echolor "${@}"
fi
